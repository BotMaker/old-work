sequence lookup_collision
lookup_collision={}

constant lookup_width=128,lookup_height=96

global procedure build_lookup_collision()
integer x1,y1,left1,top1,right1,bottom1,offsetx1,offsety1
integer row,col

  lookup_collision={}
  for i=0 to room_height by lookup_height do
     lookup_collision=append(lookup_collision, repeat( {}, floor(room_width/lookup_width) ) )
  end for


  for k=1 to length(instance_info) do

    if sequence(instance_info[k]) then

    x1=floor(instance_info[k][INS_X])
    y1=floor(instance_info[k][INS_Y])
    left1=instance_info[k][INS_SPR_BBOX_LEFT]
    top1=instance_info[k][INS_SPR_BBOX_TOP]
    right1=instance_info[k][INS_SPR_BBOX_RIGHT]
    bottom1=instance_info[k][INS_SPR_BBOX_BOTTOM]
    offsetx1=instance_info[k][INS_SPR_OFFSETX]
    offsety1=instance_info[k][INS_SPR_OFFSETY]

    x1=(x1+left1-offsetx1)
    y1=(y1+top1-offsety1)
    right1=(right1-left1)
    bottom1=(bottom1-top1)

    col=floor(x1/lookup_width)+1
    row=floor(y1/lookup_height)+1           
    
    if row>0 and col>0 then
      lookup_collision[row][col]=append(lookup_collision[row][col],{k})
    end if

    end if
  end for

end procedure


global procedure draw_lookup_collision()
  integer row,col
  row=1
  col=1
  for i=1 to room_height by lookup_height do
    for j=1 to room_width by lookup_width do
      rect(buffer,j-view_left,i-view_top,(j+lookup_width)-view_left,(i+lookup_height)-view_top,rgb(255,0,0))
      for k=1 to length(lookup_collision[row][col]) do
        textout_ex(buffer,font, sprint(lookup_collision[row][col][k]) ,j-view_left, (i-view_top)+(20*k), rgb(255,255,255),-1 )
      end for
      col+=1
    end for
    col=1
    row+=1
  end for
end procedure




global function position_collision_free(integer line_number, atom x, atom y,integer mode)
  integer x1,y1,left1,top1,right1,bottom1,offsetx1,offsety1
  integer x2,y2,left2,top2,right2,bottom2,offsetx2,offsety2
  integer checking,image_single
  integer width,height,row,col
  atom image1,image2
  sequence temp_info

  

  x1=floor(x)
  y1=floor(y)
  left1=instance_info[line_number][INS_SPR_BBOX_LEFT]
  top1=instance_info[line_number][INS_SPR_BBOX_TOP]
  right1=instance_info[line_number][INS_SPR_BBOX_RIGHT]
  bottom1=instance_info[line_number][INS_SPR_BBOX_BOTTOM]
  offsetx1=instance_info[line_number][INS_SPR_OFFSETX]
  offsety1=instance_info[line_number][INS_SPR_OFFSETY]

  checking=instance_info[line_number][INS_SPR_CHECKING]


  col=floor(x1/128)+1
  row=floor(y1/96)+1  

  temp_info=lookup_collision[row][col]



if checking=0 then-- bound box
  x1=(x1+left1-offsetx1)
  y1=(y1+top1-offsety1)
  right1=(right1-left1)
  bottom1=(bottom1-top1)

  for i=1 to length(temp_info) do
    ret=temp_info[i][1]
    if ret != line_number and instance_info[ret][INS_ALIVE]=1 and mode=1 then
      x2=floor(instance_info[ret][INS_X])
      y2=floor(instance_info[ret][INS_Y])
      left2=instance_info[ret][INS_SPR_BBOX_LEFT]
      top2=instance_info[ret][INS_SPR_BBOX_TOP]
      right2=instance_info[ret][INS_SPR_BBOX_RIGHT]
      bottom2=instance_info[ret][INS_SPR_BBOX_BOTTOM]
      offsetx2=instance_info[ret][INS_SPR_OFFSETX]
      offsety2=instance_info[ret][INS_SPR_OFFSETY]

      x2=(x2+left2-offsetx2)
      y2=(y2+top2-offsety2)
      right2=(right2-left2)
      bottom2=(bottom2-top2)

      if check_bb_collision_general(x1, y1, right1, bottom1, x2, y2, right2, bottom2)=1 then
        return 0
      end if
    elsif ret != line_number and instance_info[ret][INS_ALIVE]=1 and mode=0 and instance_info[ret][INS_OBJ_SOLID]=1 then

      count_collision+=1

      x2=floor(instance_info[ret][INS_X])
      y2=floor(instance_info[ret][INS_Y])
      left2=instance_info[ret][INS_SPR_BBOX_LEFT]
      top2=instance_info[ret][INS_SPR_BBOX_TOP]
      right2=instance_info[ret][INS_SPR_BBOX_RIGHT]
      bottom2=instance_info[ret][INS_SPR_BBOX_BOTTOM]
      offsetx2=instance_info[ret][INS_SPR_OFFSETX]
      offsety2=instance_info[ret][INS_SPR_OFFSETY]

      x2=(x2+left2-offsetx2)
      y2=(y2+top2-offsety2)
      right2=(right2-left2)
      bottom2=(bottom2-top2)

      if check_bb_collision_general(x1, y1, right1, bottom1, x2, y2, right2, bottom2)=1 then
        return 0
      end if

    end if
  end for

end if
  return 1
end function





global function position_collision_free222(integer line_number, atom x, atom y,integer mode)
  integer x1,y1,left1,top1,right1,bottom1,offsetx1,offsety1
  integer x2,y2,left2,top2,right2,bottom2,offsetx2,offsety2
  integer checking,image_single
  integer width,height
  atom image1,image2

  

  x1=floor(x)
  y1=floor(y)
  left1=instance_info[line_number][INS_SPR_BBOX_LEFT]
  top1=instance_info[line_number][INS_SPR_BBOX_TOP]
  right1=instance_info[line_number][INS_SPR_BBOX_RIGHT]
  bottom1=instance_info[line_number][INS_SPR_BBOX_BOTTOM]
  offsetx1=instance_info[line_number][INS_SPR_OFFSETX]
  offsety1=instance_info[line_number][INS_SPR_OFFSETY]

  checking=instance_info[line_number][INS_SPR_CHECKING]


if checking=0 then-- bound box
  x1=(x1+left1-offsetx1)
  y1=(y1+top1-offsety1)
  right1=(right1-left1)
  bottom1=(bottom1-top1)

  for i=1 to length(instance_info) do
    if sequence(instance_info[i]) then
    if i != line_number and instance_info[i][INS_ALIVE]=1 and mode=1 then
      x2=floor(instance_info[i][INS_X])
      y2=floor(instance_info[i][INS_Y])
      left2=instance_info[i][INS_SPR_BBOX_LEFT]
      top2=instance_info[i][INS_SPR_BBOX_TOP]
      right2=instance_info[i][INS_SPR_BBOX_RIGHT]
      bottom2=instance_info[i][INS_SPR_BBOX_BOTTOM]
      offsetx2=instance_info[i][INS_SPR_OFFSETX]
      offsety2=instance_info[i][INS_SPR_OFFSETY]

      x2=(x2+left2-offsetx2)
      y2=(y2+top2-offsety2)
      right2=(right2-left2)
      bottom2=(bottom2-top2)

      if check_bb_collision_general(x1, y1, right1, bottom1, x2, y2, right2, bottom2)=1 then
        return 0
      end if
    elsif i != line_number and instance_info[i][INS_ALIVE]=1 and mode=0 and instance_info[i][INS_OBJ_SOLID]=1 then

      --count_collision+=1

      x2=floor(instance_info[i][INS_X])
      y2=floor(instance_info[i][INS_Y])
      left2=instance_info[i][INS_SPR_BBOX_LEFT]
      top2=instance_info[i][INS_SPR_BBOX_TOP]
      right2=instance_info[i][INS_SPR_BBOX_RIGHT]
      bottom2=instance_info[i][INS_SPR_BBOX_BOTTOM]
      offsetx2=instance_info[i][INS_SPR_OFFSETX]
      offsety2=instance_info[i][INS_SPR_OFFSETY]

      x2=(x2+left2-offsetx2)
      y2=(y2+top2-offsety2)
      right2=(right2-left2)
      bottom2=(bottom2-top2)

      if check_bb_collision_general(x1, y1, right1, bottom1, x2, y2, right2, bottom2)=1 then
        return 0
      end if

    end if
    end if
  end for

end if
  return 1
end function



global function chose_random(sequence info)
  integer num
  num=rand(length(info))
  return info[num]
end function

global function point_distance(atom x1,atom y1 , atom x2, atom y2)
    atom x, y
    x = power(floor(x1) - floor(x2), 2)
    y = power(floor(y1) - floor(y2), 2)
    return floor(sqrt(x + y))
end function



global function point_direction(atom x1,atom y1 , atom x2, atom y2)
    atom angle, x, y
    x = x1-x2
    y = y1-y2

    if y then 
      angle = 90-(arctan(x/y) *180/ PI)
    else 
      if x1>x2 then
        angle=180
      elsif x1<x2 then
        angle=0
      else
        angle=0
      end if
    end if

    if y > 0 then 
      angle -= 180 
    end if

    if angle >0  then
      angle-=360
    end if

    return floor(-angle)
end function

global function abs(integer x)
    if x < 0 then
        x = -x
    end if
    return x
end function--abs


global function warp_between(integer min, integer max,integer v)
  return v - (max - min) * floor( v / (max - min))
end function


integer ahead,maxrot,stepsize
ahead=3
maxrot=50
stepsize=40

global procedure mp_potential_step(integer line_number,atom x_temp,atom y_temp,integer stepspeed,integer checkall) 
sequence try

atom x,y,direction,tdir2,speed,hspeed,vspeed

integer trynumb
atom goaldir,dir,dif

x=get_x(line_number)
y=get_y(line_number)
direction=get_dir(line_number)
tdir2=get_dir(line_number)
speed=0
hspeed=0
vspeed=0

if x=x_temp and y=y_temp then
  return
end if

if point_distance(x,y,x_temp,y_temp)<=stepspeed then

    direction=point_direction(x,y,x_temp,y_temp)
    set_dir(line_number,direction)
    set_speed(line_number,0)
    set_x(line_number,x_temp)
    set_y(line_number,y_temp)
    return

end if

try=repeat(0,180)
trynumb=1
goaldir=point_direction(x,y,x_temp,y_temp)

for i=1 to 180 by stepsize do

    dir=warp_between( 0 ,360 ,(goaldir-i+360)  )
    dif=warp_between( 0 ,360 , (direction-dir+360)  )
    if dif<=maxrot or dif>=360-maxrot then
      try[trynumb]=dir
      trynumb+=1
    end if
    dir = warp_between( 0 ,360 ,(goaldir+i+360)  )
    dif = warp_between( 0 ,360 ,(direction-dir+360)  )
    if dif <= maxrot or dif >= 360-maxrot then
      try[trynumb] = dir
      trynumb += 1
    end if

end for

speed=stepspeed
set_speed(line_number,speed)

for i=1 to trynumb-1 do
    direction = try[i]
    --direction=warp_between(0, 360, direction)
    set_dir(line_number,direction)
    --direction=get_dir(line_number)
    hspeed = speed*cos_loTRUE2up[direction+1]
    vspeed = speed*sin_loTRUE2up[direction+1]
    
    if position_collision_free(line_number ,x + ahead*hspeed, y + ahead*vspeed, checkall)=1 and position_collision_free(line_number,x+hspeed,y+vspeed,checkall)=1 then
      return
    end if

end for

--?tdir2
speed=0
set_speed(line_number,speed)

end procedure


global procedure move_outside_solid(integer index,integer dir,integer max_distance)
  atom x,y,xx,yy
  x=get_x(index)
  y=get_y(index)
  if position_collision_free(index,x,y,0)=0 then
    for i=1 to max_distance by 20 do
      xx=x+i*cos_loTRUE2up[dir+1]
      yy=y-i*sin_loTRUE2up[dir+1]
      if position_collision_free(index,xx,yy,0)=1 then
        set_x(index,xx)
        set_y(index,yy)
        exit
      end if
    end for
  end if
end procedure
